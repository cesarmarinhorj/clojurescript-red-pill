;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name hello-world.core, :imports nil, :requires {repl clojure.browser.repl, clojure.browser.repl clojure.browser.repl}, :uses nil, :defs {say-hello-fixed {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 41, :column 7, :end-line 41, :end-column 22, :arglists (quote ([person]))}, :name hello-world.core/say-hello-fixed, :variadic false, :file "src/hello_world/core.cljs", :end-column 22, :method-params ([person]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([person])), :test true}, my-dictionary {:name hello-world.core/my-dictionary, :file "src/hello_world/core.cljs", :line 12, :column 1, :end-line 12, :end-column 19, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 12, :column 6, :end-line 12, :end-column 19}}, say-hello-anon {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 48, :column 7, :end-line 48, :end-column 21, :arglists (quote ([person]))}, :name hello-world.core/say-hello-anon, :variadic false, :file "src/hello_world/core.cljs", :end-column 21, :method-params ([person]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([person])), :test true}, jane-doe {:name hello-world.core/jane-doe, :file "src/hello_world/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 14, :column 6, :end-line 14, :end-column 14}}, conn {:name hello-world.core/conn, :file "src/hello_world/core.cljs", :line 4, :column 1, :end-line 4, :end-column 14, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 4, :column 10, :end-line 4, :end-column 14}}, john-doe {:name hello-world.core/john-doe, :file "src/hello_world/core.cljs", :line 18, :column 1, :end-line 18, :end-column 14, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 18, :column 6, :end-line 18, :end-column 14}}, jane-doe-twin {:name hello-world.core/jane-doe-twin, :file "src/hello_world/core.cljs", :line 22, :column 1, :end-line 22, :end-column 19, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 22, :column 6, :end-line 22, :end-column 19}}, my-name {:name hello-world.core/my-name, :file "src/hello_world/core.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 10, :column 6, :end-line 10, :end-column 13}}, say-hello-pretty {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 35, :column 7, :end-line 35, :end-column 23, :arglists (quote ([person]))}, :name hello-world.core/say-hello-pretty, :variadic false, :file "src/hello_world/core.cljs", :end-column 23, :method-params ([person]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([person])), :test true}, all-people {:name hello-world.core/all-people, :file "src/hello_world/core.cljs", :line 26, :column 1, :end-line 26, :end-column 16, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 26, :column 6, :end-line 26, :end-column 16}}, say-hello {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-quick-start/src/hello_world/core.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([person]))}, :name hello-world.core/say-hello, :variadic false, :file "src/hello_world/core.cljs", :end-column 16, :method-params ([person]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([person])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:name :f-name :l-name}, :order [:name :f-name :l-name]}, :doc nil}