;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name hello-world.core, :imports nil, :requires {goog.string.format goog.string.format, repl clojure.browser.repl, clojure.browser.repl clojure.browser.repl}, :uses nil, :defs {reify-sayer {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([f-name stuff]))}, :name hello-world.core/reify-sayer, :variadic false, :file "src/hello_world/core.cljs", :end-column 18, :method-params ([f-name stuff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f-name stuff])), :test true}, conn {:name hello-world.core/conn, :file "src/hello_world/core.cljs", :line 6, :column 1, :end-line 6, :end-column 14, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 6, :column 10, :end-line 6, :end-column 14}}, say-stuff-fn {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([sayer stuff]))}, :name hello-world.core/say-stuff-fn, :variadic false, :file "src/hello_world/core.cljs", :end-column 19, :method-params ([sayer stuff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sayer stuff])), :test true}, format {:name hello-world.core/format, :file "src/hello_world/core.cljs", :line 9, :column 1, :end-line 9, :end-column 12, :test true, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 9, :column 6, :end-line 9, :end-column 12}}, t34 {:num-fields 4, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :name hello-world.core/t34, :file "src/hello_world/core.cljs", :type true, :anonymous true, :column 3, :line 22, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, say-stuff {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 19, :column 4, :end-line 19, :end-column 13, :protocol hello-world.core/ISayStuff, :doc nil, :arglists (quote ([sayer stuff]))}, :protocol hello-world.core/ISayStuff, :name hello-world.core/say-stuff, :variadic false, :file "src/hello_world/core.cljs", :end-column 13, :method-params ([sayer stuff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sayer stuff])), :doc nil, :test true}, ISayStuff {:meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 17, :column 14, :end-line 17, :end-column 23, :doc nil, :protocol-symbol true, :protocol-info {:methods {say-hello [[sayer]], say-stuff [[sayer stuff]]}}}, :protocol-symbol true, :name hello-world.core/ISayStuff, :file "src/hello_world/core.cljs", :end-column 23, :column 1, :line 17, :protocol-info {:methods {say-hello [[sayer]], say-stuff [[sayer stuff]]}}, :info nil, :end-line 17, :impls #{hello-world.core/t37 hello-world.core/t34}, :doc nil, :test true}, say-hello-fn {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 11, :column 7, :end-line 11, :end-column 19, :arglists (quote ([sayer]))}, :name hello-world.core/say-hello-fn, :variadic false, :file "src/hello_world/core.cljs", :end-column 19, :method-params ([sayer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sayer])), :test true}, ->t34 {:protocol-inline nil, :meta {:anonymous true, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([reify-sayer f-name stuff meta35])), :file nil}, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :name hello-world.core/->t34, :variadic false, :file "src/hello_world/core.cljs", :method-params ([reify-sayer f-name stuff meta35]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 22, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reify-sayer f-name stuff meta35])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t37 {:protocol-inline nil, :meta {:anonymous true, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([reify-sayer f-name stuff meta38])), :file nil}, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :name hello-world.core/->t37, :variadic false, :file "src/hello_world/core.cljs", :method-params ([reify-sayer f-name stuff meta38]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 22, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reify-sayer f-name stuff meta38])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, say-hello {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/clojurescript-red-pill/hello-world/src/hello_world/core.cljs", :line 18, :column 4, :end-line 18, :end-column 13, :protocol hello-world.core/ISayStuff, :doc nil, :arglists (quote ([sayer]))}, :protocol hello-world.core/ISayStuff, :name hello-world.core/say-hello, :variadic false, :file "src/hello_world/core.cljs", :end-column 13, :method-params ([sayer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sayer])), :doc nil, :test true}, t37 {:num-fields 4, :protocols #{hello-world.core/ISayStuff cljs.core/IMeta cljs.core/IWithMeta}, :name hello-world.core/t37, :file "src/hello_world/core.cljs", :type true, :anonymous true, :column 3, :line 22, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:f-name}, :order [:f-name]}, :doc nil}